{"version":3,"sources":["components/modal/modal.module.css","components/singleItem/singleItem.module.css","images/main.jpg","components/pagi/pagination.module.css","api/useFetch.js","api/dataRoutes.js","components/modal/Modal.js","components/singleItem/SingleItem.js","components/card/Card.jsx","components/pagi/Pagination.js","App.js","api/useData.js","serviceWorker.js","index.js"],"names":["module","exports","useFetch","initUrl","useState","url","setUrl","undefined","data","setData","useEffect","fetch","then","response","status","json","mainUrls","Modal","children","closeModal","className","styles","modal","onClick","closeBtn","SingleItem","singleItem","image","src","alt","name","container","gender","location","origin","species","dimension","type","Card","img","Pagination","currentPage","setCurrentPage","info","disabled","pages","App","characters","pageNum","useCharacters","locations","useLocations","singleData","setSingleData","showCharacters","setShowCharacters","showLocations","setShowLocations","console","log","mainImg","results","map","char","key","id","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5105a7fe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"modal_modal__11oq_\",\"closeBtn\":\"modal_closeBtn__QDPX4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"singleItem\":\"singleItem_singleItem__2w0Ci\",\"scaleUp\":\"singleItem_scaleUp__2Lmy6\",\"container\":\"singleItem_container__3LV76\",\"pushIn\":\"singleItem_pushIn__31i--\",\"data_container\":\"singleItem_data_container__1hLWS\"};","module.exports = __webpack_public_path__ + \"static/media/main.e62030ff.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Pagination\":\"pagination_Pagination__3en8_\"};","import React, { useState, useEffect } from \"react\";\r\n\r\n/**\r\n     Fetch data from the given url. If it can't get any data from the url, than it writes a message into the console.\r\n     *\r\n     * @param initUrl string that gives the route that the function fetch data from.\r\n     */\r\nexport const useFetch = (initUrl) => {\r\n  const [url, setUrl] = useState(initUrl);\r\n  const [data, setData] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((response) => {\r\n        if (response.status !== 200) return \"There must be a problem\";\r\n        return response.json();\r\n      })\r\n      .then((json) => setData(json));\r\n  }, [url]);\r\n\r\n  return [data, setUrl];\r\n};\r\n","export const mainUrls = {\r\n  characters: \"https://rickandmortyapi.com/api/character/?page=\",\r\n  locations: \"https://rickandmortyapi.com/api/location/?page=\",\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./modal.module.css\";\r\n\r\nfunction Modal({ children, closeModal }) {\r\n  return (\r\n    <div className={styles.modal}>\r\n      <button onClick={closeModal} className={styles.closeBtn}>\r\n        X\r\n      </button>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport styles from \"./singleItem.module.css\";\r\nfunction SingleItem({ data }) {\r\n  return (\r\n    <div className={styles.singleItem}>\r\n      {data.image && <img src={data.image} alt=\"Rick and Morty\" />}\r\n      <div>\r\n        <h2>{data?.name ?? \"Shit happens\"}</h2>\r\n        <div className={styles.container}>\r\n          {data.gender && <p>Gender {data.gender}</p>}\r\n          {data?.location?.name && <p>Location: {data.location.name}</p>}\r\n          {data?.origin?.name && <p>Origin: {data.origin.name}</p>}\r\n          {data.species && <p>Species: {data.species}</p>}\r\n          {data.status && <p>Status: {data.status}</p>}\r\n          {data.dimension && <p>dimension: {data.dimension}</p>}\r\n          {data.type && <p>Type: {data.type}</p>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SingleItem;\r\n","import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nfunction Card({ img, name, species, onClick = null, type }) {\r\n  //  const image = props.img;\r\n  //  const name = props.name;\r\n  //  const species = props.species;\r\n\r\n  if (img !== undefined) {\r\n    return (\r\n      <div className=\"card character\" onClick={onClick}>\r\n        <div className=\"char-div\">\r\n          <img src={img} />\r\n          <h4>Name : {name}</h4>\r\n        </div>\r\n        <h3>Species : {species}</h3>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"card location\" onClick={onClick}>\r\n        <h4>Name : {name}</h4>\r\n        <h3>type : {type}</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport styles from \"./pagination.module.css\";\r\n\r\nfunction Pagination({ currentPage, setCurrentPage, info }) {\r\n  return (\r\n    <div className={styles.Pagination}>\r\n      <button disabled={currentPage === 1} onClick={() => setCurrentPage(1)}>\r\n        {\"<<\"}\r\n      </button>\r\n      <button\r\n        disabled={currentPage === 1}\r\n        onClick={() => setCurrentPage(currentPage - 1)}\r\n      >\r\n        {\"<\"}\r\n      </button>\r\n      <button onClick={() => null}>{currentPage}</button>\r\n      <button\r\n        disabled={currentPage === info.pages}\r\n        onClick={() => setCurrentPage(currentPage + 1)}\r\n      >\r\n        {\">\"}\r\n      </button>\r\n      <button\r\n        disabled={currentPage === info.pages}\r\n        onClick={() => setCurrentPage(info.pages)}\r\n      >\r\n        {\">>\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pagination;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { useCharacters, useLocations } from \"./api/useData\";\r\nimport mainImg from \"./images/main.jpg\";\r\nimport Modal from \"./components/modal/Modal\";\r\nimport SingleItem from \"./components/singleItem/SingleItem\";\r\nimport Card from \"./components/card/Card\";\r\nimport Pagination from \"./components/pagi/Pagination\";\r\n\r\nfunction App() {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  //const [characterPegi, setCharacterPegi] = useState(3)\r\n  const characters = useCharacters(currentPage);\r\n  const locations = useLocations(currentPage);\r\n  //console.log(\"Characters data: \");\r\n  //console.log(characters);\r\n  //console.log(\"Locations data: \");\r\n  //console.log(locations);\r\n\r\n  const [singleData, setSingleData] = useState(null);\r\n\r\n  const [showCharacters, setShowCharacters] = useState(false);\r\n  const [showLocations, setShowLocations] = useState(false);\r\n\r\n  const updateShowCharacters = () => {\r\n    setShowLocations(false);\r\n    setShowCharacters(true);\r\n  };\r\n\r\n  const updateShowLocations = () => {\r\n    setShowCharacters(false);\r\n    setShowLocations(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(currentPage);\r\n  }, [currentPage]);\r\n  return (\r\n    <div>\r\n      <div className=\"main\">\r\n        <h1>Rick and Morty</h1>\r\n        <div className=\"grid\">\r\n          <img src={mainImg} />\r\n\r\n          <button onClick={updateShowCharacters} className=\"character-btn\">\r\n            Character\r\n          </button>\r\n          <button onClick={updateShowLocations} className=\"location-btn\">\r\n            Location\r\n          </button>\r\n\r\n          <p className=\"character-text\">\r\n            Rick and Morty is an American adult animated science fiction sitcom\r\n            created by Justin Roiland and Dan Harmon for Cartoon Network's\r\n            nighttime programming block, Adult Swim Roiland voices the eponymous\r\n            characters, with Chris Parnell, Spencer Grammer and Sarah Chalke\r\n            voicing the rest of Rick and Morty's family. The series originated\r\n            from an animated short parody film of Back to the Future, created by\r\n            Roiland for Channel 101, a short film festival co-founded by Harmon.\r\n            The series has been acclaimed by critics for its originality,\r\n            creativity and humor.\r\n          </p>\r\n          <p className=\"location-text\">\r\n            The series follows the misadventures of cynical mad scientist Rick\r\n            Sanchez and his good-hearted, but fretful grandson Morty Smith, who\r\n            split their time between domestic life and interdimensional\r\n            adventures. The fifth season premiered on June 20, 2021, and\r\n            consisted of ten episodes. A sixth season was confirmed as part of a\r\n            long-term deal in May 2018 that ordered 70 new episodes over an\r\n            unspecified number of seasons.[2]\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"card-container\">\r\n        {showCharacters &&\r\n          characters.results.map((char) => (\r\n            <Card\r\n              key={char.id}\r\n              img={char.image}\r\n              name={char.name}\r\n              species={char.species}\r\n              onClick={() => setSingleData(char)}\r\n            />\r\n          ))}\r\n\r\n        {showLocations &&\r\n          locations.results.map((char) => (\r\n            <Card\r\n              key={char.id}\r\n              img={char.image}\r\n              name={char.name}\r\n              species={char.species}\r\n              type={char.type}\r\n              onClick={() => setSingleData(char)}\r\n            />\r\n          ))}\r\n      </div>\r\n\r\n      {(showLocations || showCharacters) && (\r\n        <Pagination\r\n          currentPage={currentPage}\r\n          info={showCharacters ? characters.info : locations.info}\r\n          setCurrentPage={setCurrentPage}\r\n        />\r\n      )}\r\n      {singleData && (\r\n        <Modal closeModal={() => setSingleData(null)}>\r\n          <SingleItem data={singleData} />\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { useEffect } from \"react\";\r\nimport { useFetch } from \"./useFetch.js\";\r\nimport { mainUrls } from \"./dataRoutes.js\";\r\n\r\n/**\r\n     Fetch data from an open-source API. It returns json containing pagination.\r\n     The json contains an `info` and a `results` property. The `info` contains every information about the pagination,\r\n     the `results` contains the characters objects situated in the given page number in the pagination.\r\n     *\r\n     * @param pageNum integer that gives the pagination page number. The json `info` property contains how many pages are.\r\n     */\r\nexport const useCharacters = (pageNum = 1) => {\r\n  const [characters, setUrl] = useFetch(mainUrls.characters + pageNum);\r\n  useEffect(() => {\r\n    setUrl(mainUrls.characters + pageNum);\r\n  }, [pageNum]);\r\n  return characters === undefined ? \"Loading...\" : characters;\r\n};\r\n\r\n/**\r\n     Fetch data from an open-source API. It returns json containing pagination.\r\n     The json contains an `info` and a `results` property. The `info` contains every information about the pagination,\r\n     the `results` contains the locations objects situated in the given page number in the pagination.\r\n     *\r\n     * @param pageNum integer that gives the pagination page number. The json `info` property contains how many pages are.\r\n     */\r\nexport const useLocations = (pageNum = 1) => {\r\n  const [locations, setUrl] = useFetch(mainUrls.locations + pageNum);\r\n  useEffect(() => {\r\n    setUrl(mainUrls.locations + pageNum);\r\n  }, [pageNum]);\r\n  return locations === undefined ? \"Loading...\" : locations;\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}